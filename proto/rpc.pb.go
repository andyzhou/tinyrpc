// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Packet struct {
	Kind                 int32    `protobuf:"varint,1,opt,name=kind,proto3" json:"kind,omitempty"`
	MessageId            int32    `protobuf:"varint,2,opt,name=messageId,proto3" json:"messageId,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	ErrCode              int32    `protobuf:"varint,4,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrMsg               string   `protobuf:"bytes,5,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Packet) Reset()         { *m = Packet{} }
func (m *Packet) String() string { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()    {}
func (*Packet) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *Packet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Packet.Unmarshal(m, b)
}
func (m *Packet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Packet.Marshal(b, m, deterministic)
}
func (m *Packet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet.Merge(m, src)
}
func (m *Packet) XXX_Size() int {
	return xxx_messageInfo_Packet.Size(m)
}
func (m *Packet) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet.DiscardUnknown(m)
}

var xxx_messageInfo_Packet proto.InternalMessageInfo

func (m *Packet) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *Packet) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *Packet) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Packet) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Packet) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*Packet)(nil), "tinyrpc.Packet")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x50, 0x3b, 0x4b, 0xc0, 0x30,
	0x10, 0x26, 0xda, 0x07, 0x39, 0x7c, 0xc0, 0x0d, 0x1a, 0xc4, 0xa1, 0x38, 0x05, 0x84, 0xe0, 0xe3,
	0x1f, 0xe8, 0xe4, 0x20, 0x48, 0xba, 0xb9, 0xc5, 0xe4, 0x28, 0xa5, 0xb4, 0xa9, 0xd7, 0x20, 0xb8,
	0xf9, 0xd3, 0xc5, 0xb4, 0x45, 0x70, 0x72, 0xba, 0xef, 0x09, 0x1f, 0x07, 0x92, 0x67, 0x6f, 0x66,
	0x8e, 0x29, 0x62, 0x9d, 0xfa, 0xe9, 0x93, 0x67, 0x7f, 0xf5, 0x25, 0xa0, 0x7a, 0x71, 0x7e, 0xa0,
	0x84, 0x08, 0xc5, 0xd0, 0x4f, 0x41, 0x89, 0x46, 0xe8, 0xd2, 0x66, 0x8c, 0x97, 0x20, 0x47, 0x5a,
	0x16, 0xd7, 0xd1, 0x53, 0x50, 0x07, 0xd9, 0xf8, 0x15, 0x7e, 0x1a, 0xc1, 0x25, 0xa7, 0x0e, 0x1b,
	0xa1, 0x8f, 0x6c, 0xc6, 0xa8, 0xa0, 0x26, 0xe6, 0xc7, 0x18, 0x48, 0x15, 0x39, 0xbf, 0x53, 0x3c,
	0x83, 0x8a, 0x98, 0x9f, 0x97, 0x4e, 0x95, 0x8d, 0xd0, 0xd2, 0x6e, 0xec, 0x2e, 0xc2, 0xf1, 0xba,
	0xa0, 0x25, 0xfe, 0xe8, 0x3d, 0xe1, 0x2d, 0xc8, 0x36, 0x31, 0xb9, 0xd1, 0xd2, 0x3b, 0x9e, 0x9a,
	0x6d, 0xaa, 0x59, 0x43, 0x17, 0x7f, 0x05, 0x2d, 0x6e, 0x04, 0x5e, 0x43, 0xdd, 0xd2, 0x14, 0xfe,
	0x55, 0x78, 0x38, 0x87, 0x13, 0x1f, 0x47, 0x93, 0xfc, 0x6e, 0xbc, 0x96, 0xf9, 0x2b, 0x6f, 0x55,
	0x3e, 0xf7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xbb, 0xa4, 0x95, 0x29, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PacketServiceClient is the client API for PacketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PacketServiceClient interface {
	// packet request for stream mode
	StreamReq(ctx context.Context, opts ...grpc.CallOption) (PacketService_StreamReqClient, error)
	// general request
	SendReq(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*Packet, error)
}

type packetServiceClient struct {
	cc *grpc.ClientConn
}

func NewPacketServiceClient(cc *grpc.ClientConn) PacketServiceClient {
	return &packetServiceClient{cc}
}

func (c *packetServiceClient) StreamReq(ctx context.Context, opts ...grpc.CallOption) (PacketService_StreamReqClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PacketService_serviceDesc.Streams[0], "/tinyrpc.PacketService/StreamReq", opts...)
	if err != nil {
		return nil, err
	}
	x := &packetServiceStreamReqClient{stream}
	return x, nil
}

type PacketService_StreamReqClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type packetServiceStreamReqClient struct {
	grpc.ClientStream
}

func (x *packetServiceStreamReqClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *packetServiceStreamReqClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packetServiceClient) SendReq(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*Packet, error) {
	out := new(Packet)
	err := c.cc.Invoke(ctx, "/tinyrpc.PacketService/SendReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PacketServiceServer is the server API for PacketService service.
type PacketServiceServer interface {
	// packet request for stream mode
	StreamReq(PacketService_StreamReqServer) error
	// general request
	SendReq(context.Context, *Packet) (*Packet, error)
}

// UnimplementedPacketServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPacketServiceServer struct {
}

func (*UnimplementedPacketServiceServer) StreamReq(srv PacketService_StreamReqServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReq not implemented")
}
func (*UnimplementedPacketServiceServer) SendReq(ctx context.Context, req *Packet) (*Packet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReq not implemented")
}

func RegisterPacketServiceServer(s *grpc.Server, srv PacketServiceServer) {
	s.RegisterService(&_PacketService_serviceDesc, srv)
}

func _PacketService_StreamReq_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PacketServiceServer).StreamReq(&packetServiceStreamReqServer{stream})
}

type PacketService_StreamReqServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type packetServiceStreamReqServer struct {
	grpc.ServerStream
}

func (x *packetServiceStreamReqServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *packetServiceStreamReqServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PacketService_SendReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Packet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketServiceServer).SendReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tinyrpc.PacketService/SendReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketServiceServer).SendReq(ctx, req.(*Packet))
	}
	return interceptor(ctx, in, info, handler)
}

var _PacketService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tinyrpc.PacketService",
	HandlerType: (*PacketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendReq",
			Handler:    _PacketService_SendReq_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReq",
			Handler:       _PacketService_StreamReq_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}
