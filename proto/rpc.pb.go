// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: rpc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//message for packet
type Packet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind      int32  `protobuf:"varint,1,opt,name=kind,proto3" json:"kind,omitempty"`           //1:request 2:response
	MessageId int32  `protobuf:"varint,2,opt,name=messageId,proto3" json:"messageId,omitempty"` //message id
	Data      []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`            //byte data
	ErrCode   int32  `protobuf:"varint,4,opt,name=errCode,proto3" json:"errCode,omitempty"`     //optional
	ErrMsg    string `protobuf:"bytes,5,opt,name=errMsg,proto3" json:"errMsg,omitempty"`        //optional
}

func (x *Packet) Reset() {
	*x = Packet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Packet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Packet) ProtoMessage() {}

func (x *Packet) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Packet.ProtoReflect.Descriptor instead.
func (*Packet) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *Packet) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *Packet) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Packet) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Packet) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *Packet) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

var File_rpc_proto protoreflect.FileDescriptor

var file_rpc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63,
	0x22, 0x80, 0x01, 0x0a, 0x06, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x4d, 0x73, 0x67, 0x32, 0x5f, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x12, 0x0b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x0b,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x23, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x1a, 0x0b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x42, 0x29, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x63, 0x2e, 0x72,
	0x70, 0x63, 0x5a, 0x1b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x6e, 0x64, 0x79, 0x7a, 0x68, 0x6f, 0x75, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x72, 0x70, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_proto_rawDescOnce sync.Once
	file_rpc_proto_rawDescData = file_rpc_proto_rawDesc
)

func file_rpc_proto_rawDescGZIP() []byte {
	file_rpc_proto_rawDescOnce.Do(func() {
		file_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_proto_rawDescData)
	})
	return file_rpc_proto_rawDescData
}

var file_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_rpc_proto_goTypes = []interface{}{
	(*Packet)(nil), // 0: rpc.Packet
}
var file_rpc_proto_depIdxs = []int32{
	0, // 0: rpc.PacketService.StreamReq:input_type -> rpc.Packet
	0, // 1: rpc.PacketService.SendReq:input_type -> rpc.Packet
	0, // 2: rpc.PacketService.StreamReq:output_type -> rpc.Packet
	0, // 3: rpc.PacketService.SendReq:output_type -> rpc.Packet
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_rpc_proto_init() }
func file_rpc_proto_init() {
	if File_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Packet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_proto_depIdxs,
		MessageInfos:      file_rpc_proto_msgTypes,
	}.Build()
	File_rpc_proto = out.File
	file_rpc_proto_rawDesc = nil
	file_rpc_proto_goTypes = nil
	file_rpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PacketServiceClient is the client API for PacketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PacketServiceClient interface {
	//packet request, use stream mode
	StreamReq(ctx context.Context, opts ...grpc.CallOption) (PacketService_StreamReqClient, error)
	//generate request
	SendReq(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*Packet, error)
}

type packetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPacketServiceClient(cc grpc.ClientConnInterface) PacketServiceClient {
	return &packetServiceClient{cc}
}

func (c *packetServiceClient) StreamReq(ctx context.Context, opts ...grpc.CallOption) (PacketService_StreamReqClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PacketService_serviceDesc.Streams[0], "/rpc.PacketService/StreamReq", opts...)
	if err != nil {
		return nil, err
	}
	x := &packetServiceStreamReqClient{stream}
	return x, nil
}

type PacketService_StreamReqClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type packetServiceStreamReqClient struct {
	grpc.ClientStream
}

func (x *packetServiceStreamReqClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *packetServiceStreamReqClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *packetServiceClient) SendReq(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*Packet, error) {
	out := new(Packet)
	err := c.cc.Invoke(ctx, "/rpc.PacketService/SendReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PacketServiceServer is the server API for PacketService service.
type PacketServiceServer interface {
	//packet request, use stream mode
	StreamReq(PacketService_StreamReqServer) error
	//generate request
	SendReq(context.Context, *Packet) (*Packet, error)
}

// UnimplementedPacketServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPacketServiceServer struct {
}

func (*UnimplementedPacketServiceServer) StreamReq(PacketService_StreamReqServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReq not implemented")
}
func (*UnimplementedPacketServiceServer) SendReq(context.Context, *Packet) (*Packet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReq not implemented")
}

func RegisterPacketServiceServer(s *grpc.Server, srv PacketServiceServer) {
	s.RegisterService(&_PacketService_serviceDesc, srv)
}

func _PacketService_StreamReq_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PacketServiceServer).StreamReq(&packetServiceStreamReqServer{stream})
}

type PacketService_StreamReqServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type packetServiceStreamReqServer struct {
	grpc.ServerStream
}

func (x *packetServiceStreamReqServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *packetServiceStreamReqServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PacketService_SendReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Packet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PacketServiceServer).SendReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.PacketService/SendReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PacketServiceServer).SendReq(ctx, req.(*Packet))
	}
	return interceptor(ctx, in, info, handler)
}

var _PacketService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PacketService",
	HandlerType: (*PacketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendReq",
			Handler:    _PacketService_SendReq_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReq",
			Handler:       _PacketService_StreamReq_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}
